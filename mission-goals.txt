import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Target,
  TrendingUp,
  Globe,
  Shield,
  Users,
  Code,
  ChevronRight,
  CheckCircle
} from 'lucide-react';

const goalData = [
  {
    id: 'market-leadership',
    title: 'Market Leadership',
    icon: TrendingUp,
    description: 'Establish SnipeAI as the leading AI-powered trading platform in the cryptocurrency space',
    timeline: 'Q4 2024',
    objectives: [
      'Achieve 100,000+ active users',
      'Process $1B+ in trading volume',
      'Maintain 99.9% system uptime',
      'Launch mobile applications'
    ],
    progress: 75,
    status: 'in-progress',
    color: 'from-blue-500 to-indigo-500'
  },
  {
    id: 'global-expansion',
    title: 'Global Expansion',
    icon: Globe,
    description: 'Expand platform accessibility and services to traders worldwide',
    timeline: 'Q1 2025',
    objectives: [
      'Multi-language support',
      'Regional market analysis',
      'Local community building',
      'Strategic partnerships'
    ],
    progress: 45,
    status: 'in-progress',
    color: 'from-purple-500 to-pink-500'
  },
  {
    id: 'tech-innovation',
    title: 'Technical Innovation',
    icon: Code,
    description: 'Continue pushing the boundaries of AI trading technology',
    timeline: 'Q2 2025',
    objectives: [
      'Advanced ML algorithms',
      'Real-time market analysis',
      'Cross-chain integration',
      'Enhanced automation'
    ],
    progress: 60,
    status: 'in-progress',
    color: 'from-green-500 to-teal-500'
  }
];

const GoalCard = ({ goal, isExpanded, onToggle }) => {
  const Icon = goal.icon;

  return (
    <motion.div
      layout
      className="bg-gray-800 rounded-xl overflow-hidden"
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.3 }}
    >
      <motion.button
        onClick={onToggle}
        className="w-full text-left p-6"
        whileHover={{ scale: 1.02 }}
        transition={{ duration: 0.2 }}
      >
        <div className="flex items-start space-x-4">
          <div className={`p-3 rounded-lg bg-gradient-to-br ${goal.color}`}>
            <Icon className="w-6 h-6 text-white" />
          </div>
          <div className="flex-1">
            <div className="flex items-center justify-between mb-2">
              <h4 className="text-xl font-bold text-white">{goal.title}</h4>
              <span className="text-sm text-gray-400">{goal.timeline}</span>
            </div>
            <p className="text-gray-400">{goal.description}</p>
          </div>
          <ChevronRight 
            className={`w-6 h-6 text-gray-400 transform transition-transform duration-300
                     ${isExpanded ? 'rotate-90' : ''}`}
          />
        </div>

        {/* Progress Bar */}
        <div className="mt-4">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm text-gray-400">Progress</span>
            <span className="text-sm text-gray-400">{goal.progress}%</span>
          </div>
          <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
            <motion.div
              className={`h-full bg-gradient-to-r ${goal.color}`}
              initial={{ width: 0 }}
              animate={{ width: `${goal.progress}%` }}
              transition={{ duration: 1, delay: 0.5 }}
            />
          </div>
        </div>
      </motion.button>

      <AnimatePresence>
        {isExpanded && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
          >
            <div className="px-6 pb-6">
              <h5 className="text-sm font-semibold text-gray-400 mb-3">
                Key Objectives
              </h5>
              <div className="space-y-3">
                {goal.objectives.map((objective, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="flex items-center space-x-3"
                  >
                    <CheckCircle className={`w-5 h-5 text-${goal.color.split('-')[1]}-500`} />
                    <span className="text-gray-300">{objective}</span>
                  </motion.div>
                ))}
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

const MissionGoals = () => {
  const [expandedGoal, setExpandedGoal] = useState(null);

  return (
    <div className="space-y-6">
      {goalData.map((goal) => (
        <GoalCard
          key={goal.id}
          goal={goal}
          isExpanded={expandedGoal === goal.id}
          onToggle={() => setExpandedGoal(expandedGoal === goal.id ? null : goal.id)}
        />
      ))}

      {/* Summary Stats */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mt-8">
        {[
          { label: 'Goals Set', value: '12+' },
          { label: 'Completed', value: '8' },
          { label: 'In Progress', value: '3' },
          { label: 'Success Rate', value: '92%' }
        ].map(({ label, value }, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className="bg-gray-800 rounded-lg p-4 text-center"
          >
            <div className="text-2xl font-bold text-blue-400 mb-1">{value}</div>
            <div className="text-sm text-gray-400">{label}</div>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

export default MissionGoals;